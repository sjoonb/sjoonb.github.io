---
layout: post
title:  "HTTP Architecture"
categories: network
date:  2022-12-01 22:03:02 +0900
---

- [웹 서버](#웹-서버)
- [프락시](#프락시)
  - [게이트웨이와의 차이](#게이트웨이와의-차이)
  - [왜 프락시를 사용하는가](#왜-프락시를-사용하는가)
  - [프락시 서버 배치](#프락시-서버-배치)
  - [프락시가 어떻게 트래픽을 처리하는가](#프락시가-어떻게-트래픽을-처리하는가)
- [캐시](#캐시)
  - [적중과 부적중](#적중과-부적중)
  - [재검사](#재검사)
  - [Cache Topology](#cache-topology)
    - [private cache](#private-cache)
    - [public cache](#public-cache)
    - [proxy hierarchy](#proxy-hierarchy)


<br/>
## 웹 서버

웹 서버는 [HTTP]({% post_url 2022-11-29-http %}) 및 그와 관련된 [TCP/IP]({% post_url 2022-11-29-tcp-ip %}) 처리를 구현한 것이다. HTTP 프로토콜을 구현하고, 웹 리소스를 관리하고, 웹 서버 관리 기능을 제공한다.

- Docroot <br/>
웹 서버는 여러 종류의 리소스 매핑을 지원하는데, 가장 단순한 형태는 요청 URI를 웹 서버의 파일 시스템 안에 있는 파일 이름으로 사용하는 것이다. 일반적으로 웹 서버에서 특별한 폴더를 웹 콘텐츠를 위한 공간으로 사용하는데, 이 폴더를 docroot 라고 부른다.

<br/>
## 프락시

프락시 서버는 클라이언트의 입장에서 트랜잭션을 수행하는 중개인이다. 웹 프락시가 있다면, 클라이언트는 HTTP 서버와 얘기하는 대신, 자신의 입장에서 서버와 대화해주는 프락시와 이야기한다.

<br/>
### 게이트웨이와의 차이

`게이트웨이`는 서로 다른 프로토콜을 사용하는 둘 이상의 애플리케이션을 연결하는 반면, 프락시는 같은 프로토콜을 사용하는 둘 이상의 애플리케이션을 연결한다. 

하지만, 실질적으로 둘의 차이점은 모호하다. 브라우저와 서버는 다른 버전의 HTTP를 구현하기 때문에, 프락시는 약간의 프로토콜 변환 기능을 수행하기도 한다. 게다가 상용 프락시는 `SSL 보안 프로토콜`, SOCKS 방화벽, FTP 접근등을 지원하기 위해 게이트웨이 기능을 구현한다.

<br/>
### 왜 프락시를 사용하는가

웹 프락시 서버는 **실용적이고 유용한 여러가지 기능**을 구현할 수 있어, 다양한 용도로 사용될 수 있다. 대표적으로 요청이나 응답을 제한하는 `어린이 필터`, `문서 접근 제어`, `방화벽 서버`와, 네트워크 비용을 줄이도록 도와주는 `웹 캐시` 프락시, 웹 서버인 것처럼 위장하는 `Surrogate(대리, 리버스) proxy`, 이미지 변환, 압축, 번역등의 기능을 제공하는 `트랜스코딩` 프락시, HTTP 메시지에서 신원을 식별할 수 있는 특성들(IP, From, Referer, Cookie, URI Session ID 등)을 제거해 주는 `익명화 프락시` 등이 있다.


<br/>
### 프락시 서버 배치

- Egress(출구) proxy <br/>
로컬네트워크의 출구에 박아 넣은 형태. 회사 밖의 악의적인 해커들을 막는 방화벽을 제공하거나, 인터넷 성능 개선을 위한 기능 구현, 어린이 필터 프락시 등이 해당된다.

- 입구 프락시 <br/>
    고객의 모든 요청을 종합적으로 처리하기 위해 프락시는 ISP 접근 지점에 위치하기도 한다. ISP는 사용자들의 다운로드 속도를 개선하고, 인터넷 대역폭 비용을 줄이기 위해 캐시 프락시를 사용해 많이 찾는 문서들의 사본을 저장한다.
    > ISP (internet service provider) is a company that provides individuals and organizations access to the internet and other related services.
    
    ISP란, 인터넷 인프라를 제공하는 회사라고 볼 수 있다.

- Surrogate(대리, 리버스) proxy <br/>
    네트워크 끝단의 서버 앞에 위치하여, 웹 서버로 향하는 모든 요청을 처리한다. 웹 서버에 보안 기능을 추가하거나, 캐시를 배치하여 성능을 개선할 수도 있다. 대리 프락시는 일반적으로 웹 서버의 이름과 IP 주소로 위장하기 때문에, 모든 요청은 서버가 아닌 이 프락시로 가게 된다.

- 네트워크 교환 프락시 <br/>
    캐시를 이용해 인터넷 교차로의 혼잡을 완화하고, 흐름을 감시하기 위해, 충분한 처리 능력을 갖춘 프락시가 네트워크 사이의 피어링 교환 지점들에 놓일 수 있다.

프락시는 동적으로 다음 노드를 선택하여 라우팅 할 수 있다. 이를 동적 부모 선택이라고 하는데, `부하 균형`, `지리적 인접성에 근거한 라우팅`, `유료 서비스 가입자를 위한 라우팅` 등과 같은 목적을 위해 사용된다.

<br/>
### 프락시가 어떻게 트래픽을 처리하는가

어떤 경로로 클라이언트의 요청이 프락시로 흘러들어가게 되는걸까? 대표적으로 4가지 방법이 있다.

1. 클라이언트 수정<br/>
    많은 웹 클라이언트들은 수동 혹은 자동 프락시 설정을 지원하기 때문에, 이를 직접 설정하여 프락시를 통해 요청을 보낼 수 있다.

2. 네트워크 수정<br/>
    클라이언트는 전혀 간섭할 수 없는 상태에서, 스위칭 장치와 라우팅 장치를 활용해 네트워크 인프라를 가로채며 웹 트래픽을 프락시로 가도록 조정할 수 있다.

3. DNS 이름공간 수정<br/>
    웹 서버 앞에 위치하는 `대리 프락시`는 웹 서버의 이름과 IP주소를 직접 사용하기 때문에, 모든 요청은 해당 프락시로 도달하게 된다.

4. 웹 서버 수정<br/>
    HTTP 리다이렉션 상태 코드(305)를 클라이언트에게 돌려주어, 해당 요청을 프락시로 리다이렉트 하도록 설정할 수 있다.


<br/>
## 캐시

웹 캐시는 자주 쓰이는 문서의 사본을 자동으로 보관하는 HTTP 장치이다. 웹 요청이 캐시에 도착했을 때, 캐시된 로컬에 사본이 존재한다면, 그 문서는 원 서버가 아닌 캐시로부터 제공된다. HTTP는 캐시를 통해 **불필요한 데이터 전송을 방지**하고, **대역폭 병목**, **Flash Crowds(갑작스런 요청 쇄도) 현상**, **거리로 인한 지연**등을 완화시킨다.

<br/>
### 적중과 부적중

캐시가 모든 문서의 사본을 저장할 수는 없다. 캐시 요청이 도착했을 때, 만약 사본이 존재한다면 이를 이용해 요청을 처리하며, 이것을 `cache hit`이라고 부른다. 반대로, 캐시에 대응하는 사본이 없다면 원 서버에서 문서를 가져오게 되며, 이를 `cache miss`라고 부른다. 

캐시가 요청을 처리한 비율을 적중률 이라고 하며, 적중률 40% 정도면 웹 캐시로 괜찮은 편이라고 한다.

<br/>
### 재검사

원 서버 콘텐츠는 변경될 수 있기 때문에, 캐시는 반드시 그들이 갖고 있는 사본이 여전히 최신 것인지를 서버를 통해 때때로 점검해야 한다.

캐시는 스스로 원한다면 언제든 사본을 재검사 할 수 있으나, 캐시는 문서를 수백만개씩 갖고 있는 것에 비해 네트워크 대역폭은 부족하기 때문에 이를 남발해선 안된다. 해당 사본이 검사를 할 필요가 있을 정도로 충분히 오래된 경우에만 재검사를 해야 한다.

-> 충분히 오래된 경우가 뭐지?

HTTP는 캐시된 객체를 재확인하기 위한 몇 가지 도구를 제공하는데, 그중 가장 많이 쓰이는 것은 `If-Modified-Since` 헤더로, GET 요청에 추가하여 캐시된 시간 이후에 변경된 경우에만 사본을 보내달라고 요청할 수 있다. 
 
 해당 요청을 받은 서버는 콘텐츠가 변경되지 않았으면 **304 Not Modified** 응답 코드를, 변경되었다면 **200 OK** 코드와 함께 콘텐츠를 보내며, 만약 서버 객체가 삭제되었다면 **404 Not Found** 응답을 돌려보낸다. 캐시는 200 응답 코드를 받으면 사본을 업데이트하고, 404를 받으면 사본을 삭제한다.

<br/>
### Cache Topology


캐시는 한 명의 사용자에게만 할당될 수도 있고, 수천 명의 사용자들 간에 공유될 수도 있다. 한 명에게만 할당된 캐시를 `private cache`라고 부르며, 공유된 캐시는 `public cache`라고 부른다.

<br/>
#### private cache

웹브라우저에 내장되는 형태로 제공된다. 대부분의 브라우저는 자주 쓰이는 문서를 개인용 컴퓨터의 디스크와 메모리에 캐시해 놓고, 사용자가 캐시 사이즈와 설정을 수정할 수 있도록 허용한다.


<br/>
#### public cache

public cache는 캐시 프락시 서버, 더 흔히 프락시 캐시라고 불리는 공유된 프락시 서버다. 프락시 캐시는 로컬 캐시에 문서를 제공하거나, 혹은 사용자의 입장에서 서버에 접근한다. 공용 캐시에는 여러 사용자가 접근하기 때문에, 불필요한 트래픽을 줄일 수 있는 더 많은 기회가 있다.

<br/>
#### proxy hierarchy
![proxy-hierarchy](/asset/images/proxy-hierarchy.png){:class="img-responsive"}

작지만 저렴한 캐시 계층에서 cache miss 가 발생했을 때, 더 크고 비싼 부모 캐시가 남은 트래픽을 처리하는 구조가 합리적이다. 계층 상단에는 많은 사용자들에 의해 공유되는 문서를 유지해야 하기 때문에, 더 크고 비싸질 수 밖에 없다.    
