---
layout: post
title:  "HTTP"
categories: network
date:   2022-11-29 11:34:23 +0900
---

- [HTTP 란](#http-란)
- [트랜잭션](#트랜잭션)
- [URI](#uri)
- [메시지](#메시지)
- [메서드](#메서드)
- [상태 코드](#상태-코드)


#  HTTP 란

 Hypertext Transfer Protocol 의 약자이다. `Hypertext` 를 전송하는 약속이라는 것인데, 그렇다면 `Hypertext` 는 무엇일까?


> Hypertext is text displayed on a computer display or other electronic devices with references (hyperlinks) to other text that the reader can immediately access

간단하게, 인터넷에서 사용되는 문서라고 봐도 될 것 같다. 

> HTTP (Hypertext Transfer Protocol) is the set of rules for transferring files -- such as text, images, sound, video and other multimedia files -- over the web

즉, `HTTP` 는 텍스트, 이미지, 동영상 등의 다양한 multimiedia files 를 web 을 통해 전송하는 규칙들의 집합이다.

 `HTTP` 는 신뢰성 있는 데이터 전송 프로토콜 [TCP/IP]({% post_url 2022-11-29-tcp-ip %}) 를 사용하며, 데이터가 지구 반대편에서 오더라도, 전송 중 손상되거나 꼬이지 않음을 보장한다. 따라서, 이를 활용하는 사람들은 인터넷의 결함이나 약점에 대한 걱정없이 애플리케이션 고유의 기능을 구현하는데 집중할 수 있다.


# 트랜잭션

 전송 과정의 주체는 결국 크게 송신자, 수신자로 나뉘어 지는데, 이를 각각 클라이언트와 서버라고 부른다. 클라이언트는 주로 `URI` 를 통해 서버의 자원에 접근하며, 다양한 HTTP 메서드를 호출하여 원하는 동작을 수행한다.
  
 클라이언트와 서버가 요청과 응답을 통해 데이터를 주고 받으며 상호작용하는 것을 **트랜잭션**이라고 부른다. 

# URI

uniform resource identifier 의 약자이며, 한번 더 `URL`, `URN` 으로 구분지을 수 있다. 그 중 주로 쓰이는  것은 `URL` (uniform resource locator)로, [https://www.google.com](https://www.google.com) 와 같이, 흔히 볼 수 있는 형태이다. 오늘날 대부분의 `URI`는 `URL`이다.

# 메시지

요쳥과 응답 메시지의 형태는 3가지로 분류된다.


![httpMessage](/asset/images/httpMessage.png){:class="img-responsive"}

- Start line 
- Headers 
- Body


# 메서드

서버에게 어떤 동작이 취해져야 하는지 요청하는 방법으로, 위 request 메시지의 Start line 에서 확인할 수 있다. 대표적으로 쓰이는 2가지 메서드는 다음과 같다.

- GET - 서버에게 리소스를 달라고 요청하기 위해 사용된다.
- POST - 서버에 입력 데이터를 전송하는데 사용된다.

# 상태 코드

클라이언트에게 요청 후 결과에 대하여 설명해주는 코드로, response 메시지의 Start line 에서 확인할 수 있다. 대표적으로 쓰이는 상태코드는 다음과 같다.

- 200 - OK, 요청 성공을 의미한다.
- 302 - Found, 요청한 resoure 가 임시로 옮겨졌으니, 다른 곳에서 가져가라. 
- 4xx
  - 400 - Bad Request, 클라이언트가 잘못된 요청을 보냈음을 알려준다.
  - 404 - Not found, 요청한 URL이 존재지 않는다는 것을 알려준다.
- 500 - Internal Server Error, 서버 내부에서 에러가 발생하였음을 의미한다.
